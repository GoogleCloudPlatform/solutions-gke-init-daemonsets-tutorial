# Copyright 2021 chris@ondat.io
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: entrypoint
  labels:
    app: default-init
data:
  entrypoint.sh: |
    #!/usr/bin/env bash
    set -vx

    set -euo pipefail

    ROOT_MOUNT_DIR="${ROOT_MOUNT_DIR:-/root}"

    if [ -f /etc/os-release ]
    then
        . /etc/os-release
    else
        echo "ERROR: I need the file /etc/os-release to determine what my distribution is..."
        exit
    fi

    echo "We are going to use the operating system ID of $ID and version of $VERSION_ID"
    
    case $ID in
    ubuntu)
        # Install the packages for StorageOS to be installed
        chroot "${ROOT_MOUNT_DIR}" apt update && chroot "${ROOT_MOUNT_DIR}" apt -y --no-install-recommends install linux-modules-extra-$(uname -r)
        
        sleep 30

        # configfs on /root/sys/kernel/config type configfs (rw,relatime)
        
        # Configfs can be built in the kernel, hence the module 
        # initstate file will not exist. Even though, the mount
        # is present and working
        echo "Checking configfs"
        if mount | grep -q "^configfs on /root/sys/kernel/config"; then
            echo "configfs mounted on /sys/kernel/config"
        else
            echo "configfs not mounted, checking if kmod is loaded"
            state_file="${ROOT_MOUNT_DIR}"/sys/module/configfs/initstate
            if [ -f "$state_file" ] && grep -q live "$state_file"; then
                echo "configfs mod is loaded"
            else
                echo "configfs not loaded, executing: modprobe -b configfs"
                chroot "${ROOT_MOUNT_DIR}" modprobe -b configfs
            fi

            if mount | grep -q configfs; then
                echo "configfs mounted"
            else
                echo "mounting configfs /sys/kernel/config"
                chroot "${ROOT_MOUNT_DIR}" mount -t configfs configfs /sys/kernel/config
            fi
        fi

        target_dir=/sys/kernel/config/target
        core_dir="$target_dir"/core
        loop_dir="$target_dir"/loopback

        # Enable a mod if not present
        # /sys/module/$modname/initstate has got the word "live"
        # in case the kernel module is loaded and running 
        for mod in target_core_mod tcm_loop target_core_file uio target_core_user; do
            state_file="${ROOT_MOUNT_DIR}"/sys/module/$mod/initstate
            if [ -f "$state_file" ] && grep -q live "$state_file"; then
                echo "Module $mod is running"
            else 
                echo "Module $mod is not running"
                echo "--> executing \"modprobe -b $mod\""
                if ! chroot "${ROOT_MOUNT_DIR}" modprobe -b $mod; then
                    # core_user and uio are not mandatory
                    if [ "$mod" != "target_core_user" ] && [ "$mod" != "uio" ]; then
                        exit 1
                    else 
                        echo "Couldn't enable $mod"
                    fi
                fi
                # Enable module at boot
                chroot "${ROOT_MOUNT_DIR}" mkdir -p /etc/modules-load.d
                [ ! -f "${ROOT_MOUNT_DIR}"/etc/modules-load.d/lio.conf ] && chroot "${ROOT_MOUNT_DIR}" echo $mod >> /etc/modules-load.d/lio.conf # create file if doesn't exist
            fi
        done

        # Check if the modules loaded have its  
        # directories available on top of configfs

        [ ! -d "${ROOT_MOUNT_DIR}""$target_dir" ] && echo "$target_dir doesn't exist" && exit 1
        [ ! -d "${ROOT_MOUNT_DIR}""$core_dir" ]   && echo "$core_dir doesn't exist"   && exit 1
        [ ! -d "${ROOT_MOUNT_DIR}""$loop_dir" ]   && echo "$loop_dir doesn't exist. Creating dir manually..." && mkdir "${ROOT_MOUNT_DIR}"$loop_dir

        echo "LIO set up is ready!"

      # Install the wget and gnupg packages to be able to setup a repo for elastio
      chroot "${ROOT_MOUNT_DIR}" apt install -y wget gnupg

      sleep 20

      chroot "${ROOT_MOUNT_DIR}" wget https://repo.assur.io/release/linux/deb/Debian/10/pool/elastio-repo_0.0.2-1debian10_all.deb
      chroot "${ROOT_MOUNT_DIR}" dpkg -i elastio-repo_0.0.2-1debian10_all.deb
      
      sleep 20

      chroot "${ROOT_MOUNT_DIR}" apt install -y elastio
    ;;
    fedora | rhel | centos)
      echo " Come back to Fedora in a bit "
    ;;
    debian)
      echo "Come back to Debian in a bit"
    ;;
    amzn)
      echo "Come back to amazon linux in a bit"
    ;;
    esac 


    exit 0